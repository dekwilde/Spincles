{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1440\margr1440\vieww24580\viewh15040\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\b\fs24 \cf0 XCode Project Structure\

\b0 \
Open the .xcodeproj project file in XCode.\
Once open you'll see a folder called "Resources" in "Groups & Files" on the left side of XCode.\
Drop down the "Resources" folder.\
You'll now see a folder called "main".\
Drop down the "main" folder.\
In the "main" folder you'll see a file called "main.pde". This is where you write your Processing code.\
You can add additional .pde files to the main folder (e.g. to have separate files for classes).\
To rename your App you just need to rename the .xcodeproj file.\

\b \
Core Processing API\
\

\b0 See processingjs.org for reference
\b \
\
Modified Processing API\

\b0 \
println()				prints to the XCode console\
link()				always opens a new browser window\

\b \
iPhone Processing API\

\b0 \
touch1Started()		function is called when a first touch is detected. touch1X and touch1Y variables can be used to determine the x, y of the touch\
touch1Moved()		function is called when first touch moves. touch1X, touch1Y, ptouch1X and ptouch1Y variables can be used to determine the x, y of the touch\
touch1Stopped()		function is called when first touch is removed. touch1X, touch1Y, ptouch1X and ptouch1Y variables can be used to determine the x, y of the touch\
touch2Started()		function is called when a second touch is detected. touch2X and touch2Y variables can be used to determine the x, y of the touch\
touch2Moved()		function is called when second touch moves. touch2X, touch2Y, ptouch2X and ptouch2Y variables can be used to determine the x, y of the touch\
touch2Stopped()		function is called when second touch is removed - touch2X, touch2Y, ptouch2X and ptouch2Y variables can be used to determine the x, y of the touch\
gestureStarted()		function is called when a gesture is detected - gestureScale and gestureRotation variables can be used to determine the scaling and rotation of the gesture\
gestureChanged()		function is called when a gesture is changed - gestureScale and gestureRotation variables can be used to determine the scaling and rotation of the gesture\
gestureStopped()		function is called when a gesture is stopped - gestureScale and gestureRotation variables can be used to determine the scaling and rotation of the gesture\
keyPressed()			function is called when a key on the iPhone Keyboard is pressed (after openKeyboard() has been called) - key and keyCode variables can be used to determine key\
keyReleased()			function is called when a key on the iPhone Keyboard is pressed (after openKeyboard() has been called) - key and keyCode variables can be used to determine key\
orientationChanged()	function is called when the orientation of the device is changed - orientation variable can be used to determine the current orientation\
proximityChanged()	function is called when the state of the proximity sensor changes - proximity variable can be used to determine the state\
volumeChanged()		function is called when the volume of the device is changed - volume variable can be used to determine the level\
shakeEvent()			function is called when the device is shaken\
locationEvent() 		function is called after getCurrentLocation() or when location changes (if startLocation() has been called) - locLatitude, locLongitude, locAltitude can be used to determine location\
\pard\tx280\pardeftab280\ql\qnatural\pardirnatural
\cf0 compassEvent()				function is called when compass heading changes (if startCompass() has been called) - compassHeading can be used to determine heading\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
IPhone 				IPhone class - properties are name, device, os, version, uuid\
					(use new IPhone() to create an iPhone object)\
					returned object has following functions:\
\
					getInfo()						returns information about the device, returns an object with properties name, device, os, version, uuid\
					isNetworkConnected()			checks if device has a network connection, returns a boolean \
					getNetworkType()				returns network connection type, use MOBILE, WIFI and NONE constants to evaluate result \
					getNetworkAddress()			returns IP address of device, if available\
					beep()						plays system sound\
					vibrate()						vibrates device\
					openSMS()					opens the SMS application ready to send to a number - openSMS(telco) - telno is the phone number as a string \
					openPhone()					opens the Phone application and calls a number - openPhone(telco) - telno is the phone number as a string\
					openKeyboard()				opens the Keyboard - keyPressed() and keyReleased() functions are called when keys are pressed					getVolume()					returns the volume level as a float between 0 and 1					loadSound()					loads a sound file (.wav, .mp3, .aiff) from the data folder and returns a sound object (PSound)\
												returned object has following functions:\
												play() \
												loop()\
												pause()\
												stop()\
												rewind()\
												close()\
					startLocation()				starts location, must be done before using getLocation() or location properties\
					stopLocation()				stop location\
					getLocation()					returns location as an object with properties latitude, longitude, altitude\
					getCurrentLocation()			gets the location once and calls locationEvent() function\
					startCompass()				starts compass, must be done before using compass heading property\
					stopCompass()				stop compass\
					getProximity()				returns state of proximity sensor\
					getOrientation()				returns current orientation, use PORTRAIT and LANDSCAPE constants to evaluate result\
					startAccelerometer()			starts accelerometer, must be done before using getAcceleration() or acceleration properties					stopAccelerometer()			stops accelerometer\
					getAcceleration()				returns acceleration as an object with properties x, y, z\
					saveState()					saves values to store the state of app - saveState(statevalues) - statevalues is a CSV string of values you want to save\
					loadState()					returns values to retrieve previous state of app which were saved with saveState - values returned as CSV string\
}