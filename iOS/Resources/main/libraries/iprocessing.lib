/*
 
 iProcessing http://iprocessing.org enables native iPhone apps to be developed using the Processing language.
 Developed and maintained by Tom Hulbert http://tomhulbert.com at Luckybite http://www.luckybite.com
 iProcessing is an Xcode project template that integrates processing.js (modified to create iprocessing.js and 
 iprocessing.lib) with the Titanium iPhone JavaScript framework.  

*/


var p = null; // processing instance
var c = null;	// canvas

var eventHandlers = [];
var touchList = [null,null];

var MOBILE = 2;
var WIFI = 1;
var NONE = 0;
var LANDSCAPE = 0;
var PORTRAIT = 1;
var UPSIDE_PORTRAIT = 2;
var LANDSCAPE_RIGHT = 3;
var LANDSCAPE_LEFT = 4;

var ptouch1X = 0;
var ptouch1Y = 0;
var touch1X = 0;
var touch1Y = 0;
var ptouch2X = 0;
var ptouch2Y = 0;
var touch2X = 0;
var touch2Y = 0;
var pgestureScale = 0;	
var pgestureRotation = 0;																													
var gestureScale = 0;	
var gestureRotation = 0;	

var name = null;
var device = null;
var os = null;
var version = null;
var uuid = null;

var networkConnected = null;
var networkType = null;
var networkAddress = null;

var state = null;

var volume = null;
var micLevel = null;
var cam = "cam.png";

var proximity = null;

//var orientation = null; // note: should be here (shouldn't be in processing.js) but seems to be a conflict with the variable name 'orientation'

var accelerationX = null;
var accelerationY = null;
var accelerationZ = null;

var locLatitude = null;
var locLongitude = null;
var locAltitude = null;
var locHeading = null;
var locSpeed = null;

var compassHeading = null;

// Init and start/stop *****************************************************

function init(v) {
	var values = v.split(';');
	
	// make a reference to Processing - should be the first instance
	p = Processing.instances[0]; 

	// initialise variables
	name							= values[0];
	device						= values[1];
	os								= values[2];
	version						= values[3];
	uuid							= values[4];
	volume						= p.float(values[5]);
	proximity					= p.int(values[6]);
	p.orientation			= findOrientation(p.int(values[7]));
	networkConnected	= p.boolean(values[8]);
	networkType				= p.int(values[9]);
	networkAddress		= values[10];
	state							= values[11];

	// start iProcessing
	start();
}

function start() {
	if (p) {
		// add touch events to canvas
		c = p.externals.canvas;
		addTouchEvents(c);
		// start the Processing sketch
		p.start();
	}
}

function stop() {
	if (p) {
		// exit the Processing sketch
		p.exit();
		// remove touch events
		for (var i=0, ehl=eventHandlers.length; i<ehl; i++) {
			var elem = eventHandlers[i][0],
					type = eventHandlers[i][1],
					fn   = eventHandlers[i][2];

			if (elem.removeEventListener) {
				elem.removeEventListener(type, fn, false);
			} else if (elem.detachEvent) {
				elem.detachEvent("on" + type, fn);
			}
		}
	}
}

// Helper functions ********************************************************

function debug(message, local) { // also used for print and println																																																
	if (local) {
		document.getElementById('debug').innerText = message;
	}	else {
		Titanium.API.debug(message);
	}
}

function findOrientation(orient) {
	if (orient == PORTRAIT || orient == UPSIDE_PORTRAIT) {
		return PORTRAIT;
	} else if (orient == LANDSCAPE_RIGHT || orient == LANDSCAPE_LEFT) {
		return LANDSCAPE;
	}
}

// Modified Processing functions *******************************************

function link(href) {
	Titanium.App.fireEvent('link', {data:href});
}

// DOM Events **************************************************************

function attach(elem, type, fn) {
	if (elem.addEventListener) {
		elem.addEventListener(type, fn, false);
	} else {
		elem.attachEvent("on" + type, fn);
	}
	eventHandlers.push([elem, type, fn]);
}
		
function addTouchEvents(curElement) {
	attach( curElement, "touchmove", function(e) {
		e.preventDefault();

		for(var i = 0; i < e.changedTouches.length; i++) {
			if (e.changedTouches[i] == touchList[0]) { 	  	   
				ptouch1X = touch1X;
				ptouch1Y = touch1Y;
				touch1X = touchList[0].clientX;
				touch1Y = touchList[0].clientY;
				p.pmouseX = ptouch1X;
				p.pmouseY = ptouch1Y;
				p.mouseX = touch1X;
				p.mouseY = touch1Y;

				if ( p.touch1Moved ) {
					p.touch1Moved();
				}  

				if ( p.mouseMoved ) {
					p.mouseMoved();
				} 
			} else if (e.changedTouches[i] == touchList[1]) {
				ptouch2X = touch2X;
				ptouch2Y = touch2Y;
				touch2X = touchList[1].clientX;
				touch2Y = touchList[1].clientY;

				if ( p.touch2Moved ) {
					p.touch2Moved();
				} 
			}
		}
	});

	attach( curElement, "touchstart", function(e) {
		e.preventDefault();

		for(var i = 0; i < e.changedTouches.length; i++) {
			if (touchList[0] == null) {
				touchList[0] = e.changedTouches[i];
				ptouch1X = touch1X;
				ptouch1Y = touch1Y;
				touch1X = touchList[0].clientX;
				touch1Y = touchList[0].clientY; 
				p.pmouseX = ptouch1X;
				p.pmouseY = ptouch1Y;
				p.mouseX = touch1X;
				p.mouseY = touch1Y;

				if ( typeof p.touch1Started == "function" ) {
					p.touch1Started();
				} else {
					p.touch1Started = true;
				}
			} else if (touchList[1] == null) {
				touchList[1] = e.changedTouches[i];
				ptouch2X = touch2X;
				ptouch2Y = touch2Y;
				touch2X = touchList[1].clientX;
				touch2Y = touchList[1].clientY; 

				if ( typeof p.touch2Started == "function" ) {
					p.touch2Started();
				} else {
					p.touch2Started = true;
				}
			}
		}
	});	

	attach( curElement, "touchend", function(e) {
		e.preventDefault();

		for(var i = 0; i < e.changedTouches.length; i++) {
			if (e.changedTouches[i] == touchList[0]) {
				ptouch1X = touch1X;
				ptouch1Y = touch1Y;
				p.pmouseX = ptouch1X;
				p.pmouseY = ptouch1Y;

				if ( typeof p.touch1Started != "function" ) {
					p.touch1Started = false;
				}
				
				if ( p.touch1Stopped ) {
					p.touch1Stopped();
				}

				p.pmouseButton = 0; 
				p.mouseButton = p.LEFT; 
				if ( typeof p.mousePressed == "function" ) {
					p.mousePressed();
				} else {
					p.mousePressed = true;
				}
				if ( typeof p.mousePressed != "function" ) {
					p.mousePressed = false;
				}
				if ( p.mouseReleased ) {
					p.mouseReleased();
				}
				p.mouseButton = 0;

				touch1X = null;
				touch1Y = null;
				p.mouseX = touch1X;
				p.mouseY = touch1Y;
				touchList[0] = null;
			} else if (e.changedTouches[i] == touchList[1]) {
				ptouch2X = touch2X;
				ptouch2Y = touch2Y;

				if ( typeof p.touch2Started != "function" ) {
					p.touch2Started = false;
				}

				if ( p.touch2Stopped ) {
					p.touch2Stopped();
				}

				touch2X = null;
				touch2Y = null;
				touchList[1] = null;
			} 
		}
	});

	attach( curElement, "gesturechange", function(e) {
		e.preventDefault();

		pgestureScale = gestureScale;	
		pgestureRotation = gestureRotation;	
		gestureScale = e.scale;
		gestureRotation = e.rotation;   

		if ( p.gestureChanged ) {
			p.gestureChanged();
		}
	});	

	attach( curElement, "gesturestart", function(e) {
		e.preventDefault();

		pgestureScale = gestureScale;	
		pgestureRotation = gestureRotation;
		gestureScale = e.scale;
		gestureRotation = e.rotation;

		if ( typeof p.gestureStarted == "function" ) {
			p.gestureStarted();
		} else {
			p.gestureStarted = true;
		}
	});	

	attach( curElement, "gestureend", function(e) {
		e.preventDefault();

		pgestureScale = gestureScale;	
		pgestureRotation = gestureRotation;

		if ( typeof p.gestureStarted != "function" ) {
			p.gestureStarted = false;
		}

		if ( p.gestureStopped ) {
			p.gestureStopped();
		}

		gestureScale = null;		
		gestureRotation = null;		
	});
}

// Client Class ************************************************************

// 11/10/2010 - Currently only works as a HTTP client on port 80 with GET
Client = function Client(processing, url, port) {
	var c = {};
	
	c.url = url;
	c.port = port;
	c.inBuffer = "";
	
	//c.httpClient = Titanium.Network.createHTTPClient(); // ???
	c.httpClient = new XMLHttpRequest();
	
	c.httpClient.onload = function() {	
		c.inBuffer = c.httpClient.responseText;
		
		if ( p.clientEvent ) {
			p.clientEvent(c);
		}
	};

	c.available = function() {
		return c.inBuffer.length;
	};

	c.read = function() {
		var data = c.inBuffer;
		c.inBuffer = "";
		return data;
	};
	
	c.readString = function() {
		var data = c.inBuffer;
		c.inBuffer = "";
		return data;
	};

	c.write = function(data) {
		var values = data.split(' ');
	
		if (values.length >= 2) {			
			switch(values[0]) {
				case 'GET':
					c.httpClient.open('GET', c.url + values[1]);
					c.httpClient.send();
					break;
				case 'POST':

					break;
			}
		}
	};
	
	c.clear = function() {
		c.inBuffer = "";
	};

	c.stop = function() {
		
	};
	
	c.ip = function() {
		return c.url;
	};
	
	return c;
};

// iPhone Events ***********************************************************

function volumeChanged(vol) {
	volume = vol;

	if ( p.volumeChanged ) {
		p.volumeChanged();
	}
}

function updateMicLevel(mic) {
	micLevel = mic;
}

function proximityChanged(prox) {
	proximity = prox;

	if ( p.proximityChanged ) {
		p.proximityChanged();
	}
}

function orientationChanged(orient) {
	//orientation = findOrientation(orient);
	p.orientation = findOrientation(orient);
	
	if ( p.orientationChanged ) {
		p.orientationChanged();
	}
}

function shakeEvent() {
	if ( p.shakeEvent ) {
		p.shakeEvent();
	}
}

function updateAcceleration(x,y,z) {
	accelerationX = x;
	accelerationY = y;
	accelerationZ = z;
}

function updateLocation(lat,long,alt,head,spd) {
	locLatitude = lat;
	locLongitude = long;
	locAltitude = alt;
	locHeading = head;
	locSpeed = spd;
	if ( p.locationEvent ) {
		p.locationEvent();
	}
}

function updateCompass(magHead,trueHead) {
	compassHeading = trueHead;
	if ( p.compassEvent ) {
		p.compassEvent();
	}
}

function updateNetwork(v) {
	var values = v.split(';');
	networkConnected = p.boolean(values[0]);
	networkType = p.int(values[1]);
	networkAddress = values[2];
}

function photoSelected(f) {
	if ( p.photoSelected ) {
		p.photoSelected(f);
	}
}

function photoCancelled() {
	if ( p.photoCancelled ) {
		p.photoCancelled();
	}
}

function cameraCaptured(f) {
    if(f) {
        cam = f;
        debug("Squared: " + cam);
    }
	
	if ( p.cameraCaptured ) {
		p.cameraCaptured(f);
	}
	
}

function cameraCancelled() {
	if ( p.cameraCancelled ) {
		p.cameraCancelled();
	}
}


function keyPressed(k,kc) {
	p.key = k;
	p.keyCode = kc;
	
	if (typeof p.keyPressed === "function") {
		p.keyPressed();
	}
	if (typeof p.keyReleased === "function") {
		p.keyReleased();
	}
}

function keyboardReturned() {
	if ( p.keyboardReturned ) {
		p.keyboardReturned();
	}
}

// iPhone Class ************************************************************

IPhone = function IPhone(processing) {
	var ip = {};
	
	ip.name = name;
	ip.device = device;
	ip.os = os;
	ip.version = version;
	ip.uuid = uuid;
	ip.latitude = null;
	ip.longitude = null;
	ip.altitude = null;
	ip.heading = null;
	ip.speed = null;																							
	ip.accelerationX = null;
	ip.accelerationY = null;
	ip.accelerationZ = null;
	
	// device info -------------------------------------------------
	
	ip.getInfo = function() {																										  
		var info = {};
		info.name = ip.name;
		info.device = ip.device;
		info.os = ip.os;
		info.version = ip.version;
		info.uuid = ip.uuid;
		return info;
	};
	
	// network info ------------------------------------------------
	
	ip.isNetworkConnected = function() {
		return networkConnected;
	};

	ip.getNetworkType = function() {
		return networkType;
	};
	
	ip.getNetworkAddress = function() {
		return networkAddress;
	};

	// system notifications ----------------------------------------
	
	ip.beep = function() {
		Titanium.App.fireEvent('beep');
	};

	ip.vibrate = function() {
		Titanium.App.fireEvent('vibrate');
	};
	
	// SMS/phone ---------------------------------------------------
	
	ip.openSMS = function(num) {
		Titanium.App.fireEvent('openSMS', {data:num});
	};
	
	ip.openPhone = function(num) {
		Titanium.App.fireEvent('openPhone', {data:num});
	};
	
	// location ----------------------------------------------------
	
	ip.startLocation = function(dis) {	
		if (dis == null || dis < 10) { dis = 10; }
		Titanium.App.fireEvent('startLocation', {data:dis});
	};	
		
	ip.stopLocation = function() {
		Titanium.App.fireEvent('stopLocation');
		locLatitude = null;
		locLongitude = null;
		locAltitude = null;
		locHeading = null;
		locSpeed = null;
	};
	
	ip.getLocation = function() {																							  
		var location = {};
		location.latitude = locLatitude;
		location.longitude = locLongitude;
		location.altitude = locAltitude;
		location.heading = locHeading;
		location.speed = locSpeed;
		return location;
	};	
				
	ip.getCurrentLocation = function() {
		Titanium.App.fireEvent('getCurrentLocation');
	}; 
	
	ip.locationEvent =function() {
		return locLatitude;
		return locLongitude;
		return locAltitude;
		return locHeading;
		return locSpeed;
	}

		
	
	// compass -----------------------------------------------------
	
	ip.startCompass = function() {
		Titanium.App.fireEvent('startCompass');
	};
	
	ip.stopCompass = function() {
		Titanium.App.fireEvent('stopCompass');
		compassHeading = null;
	};
	
	ip.compassEvent = function() {
		return compassHeading;
	};
	
	// proximity ---------------------------------------------------

	ip.getProximity = function() {
		return proximity;
	};
	
	// orientation -------------------------------------------------
	
	ip.getOrientation = function() {
		return p.orientation;
	};
	
	// accelerometer -----------------------------------------------
	
	ip.startAccelerometer = function() { 
		Titanium.App.fireEvent('startAccelerometer');                                                                           
	};	
	
	ip.stopAccelerometer = function() {
		Titanium.App.fireEvent('stopAccelerometer');  
		accelerationX = null;
		accelerationY = null;
		accelerationZ = null;
	};
	
	ip.getAcceleration = function() {	
		var acceleration = {};
		acceleration.x = accelerationX;
		acceleration.y = accelerationY;
		acceleration.z = accelerationZ;
		return acceleration;
	};
	
	// state saving ------------------------------------------------
	
	ip.saveState = function(values) {		
		Titanium.App.fireEvent('saveState', {data:values});
	}
	
	ip.loadState = function() { 
		return state;
	};
	
	// sound -------------------------------------------------------
	
	ip.getVolume = function() {
		return volume;
	};
	
	ip.startMicMonitor = function() {
		Titanium.App.fireEvent('startMicMonitor');  
	};
	
	ip.stopMicMonitor = function() {
		Titanium.App.fireEvent('stopMicMonitor');
	};
	
	ip.getMicLevel = function() {
		return micLevel;
	};
	
	ip.loadSound = function loadSound(file) {	
			var filepath = "data/" + file;
			var sound = {};
			sound.filename = file;
			sound.filepath = filepath;

			Titanium.App.fireEvent('createSound', {data:[sound.filename,sound.filepath]});
			
			sound.play = function() {
				Titanium.App.fireEvent('playSound', {data:sound.filename});
			};
			
			sound.loop = function(numLoops) {
					if (numLoops) {
						// need to add a way to loop numLoops number of times
						Titanium.App.fireEvent('loopSound', {data:sound.filename});
					} else {
						Titanium.App.fireEvent('loopSound', {data:sound.filename});
					}
			};
			
			sound.pause = function() {
				Titanium.App.fireEvent('pauseSound', {data:sound.filename});
			};
			
			sound.stop = function() {
				Titanium.App.fireEvent('stopSound', {data:sound.filename});
			};
			
			sound.rewind = function() {
				Titanium.App.fireEvent('rewindSound', {data:sound.filename});
			};
			
			sound.setVolume = function(vol) {
				if (vol == null || vol > 1) { return; }
				Titanium.App.fireEvent('setVolumeSound', {data:[sound.filename,vol]});
			};
			
			sound.close = function() {
				Titanium.App.fireEvent('closeSound', {data:sound.filename});
			};
			
			return sound;
	};
	
	// photo gallery -----------------------------------------------

	ip.openPhotos = function(e) {
		if (e == null){ var edit = false; } else { var edit = e; }
		//Titanium.App.fireEvent('openPhotos', {data:edit});
	};
	
	// camera ------------------------------------------------------

	ip.openCamera = function(e) {
		if (e == null){ var edit = false; } else { var edit = e; }
		Titanium.App.fireEvent('openCamera', {data:edit});
	};
    ip.squareCamera = function(e) {
		if (e == null){ var edit = false; } else { var edit = e; }
		Titanium.App.fireEvent('squareCamera', {data:edit});
	};
    ip.updateSquare = function() {
		Titanium.App.fireEvent('updateSquare');
	};

	ip.getCamera = function() {
		var d = new Date();
        return cam + "?rand=" + d.getTime();
	};
	
	// keyboard ----------------------------------------------------
	
	ip.openKeyboard = function() {
		Titanium.App.fireEvent('openKeyboard');
	};
																																										
	return ip;
};
